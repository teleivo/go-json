# TODO

* fix order of args to errorf, fatalf. input needs to come after t
* write failing test for lexer. the lexer readKeyword does not seem to handle
`true]` or `null]` check that it would also handle `true}`, ...

* parse an array
  * parse a nested array (how to adapt the tests?)
* add String() string to ast Node interface
* would TokenType also benefit from a String(), printing all caps TRUE, FALSE, ... in errors is not friendly :)
* make a proper error type instead of a string
* parse a number
* parse an object

## IDEAS

* adapt lexer to use io.Reader and filename
* provide context to error messages. in what file, line, col is the error.
* write a CLI that takes a JSON from stdin to parse it
* support unicode
* try out fuzzing for testing
* use the parser to write a JSON stats CLI. How many arrays, objects are in the
JSON? How deeply nested is the JSON? How many nodes per type?
